buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["IoReactNativeCiePid_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"


def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["IoReactNativeCiePid_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["IoReactNativeCiePid_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  if (major == 7 && minor >= 3) {
    return true
  }

  return major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "it.ioreactnativeciepid"
  } else {
    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestDeprecated.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    buildConfigField "String", "BASE_URL_IDP", "\"https://collaudo.idserver.servizicie.interno.gov.it/idp/\""
    buildConfigField "String", "BASE_URL_CERTIFICATE", "\"collaudo.idserver.servizicie.interno.gov.it\""
    buildConfigField "String", "PIN_ROOT", "\"sha256/cGuxAXyFXFkWm61cF4HPWX8S0srS9j0aSqN0k4AP+4A=\""
    buildConfigField "String", "PIN_LEAF", "\"sha256/aQmQCV6ngX49Y/T5Imt8jykuzmOrWGnw82wtvD9yo1g=\""
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

}

repositories {
  mavenCentral()
  google()
}

//def kotlin_version = getExtOrDefault("kotlinVersion")

ext {
  kotlin_version = getExtOrDefault("kotlinVersion")
  core_version = '1.10.1'
  activity_version = '1.7.2'
  fragment_version = '1.6.0'
  browser_version = '1.5.0'
  viewmodel_version = '2.6.1'
  appcompat_version = '1.6.1'
  lifecycle_version = '2.2.0'
  okhttp_version = '4.10.0'
  retrofit_version = '2.9.0'
  security_version = '1.1.0-alpha06'
  jose_jwt_version = '9.23'
  oauth2_version = '10.9.1'
}

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  // androidpidprovider
  implementation "androidx.core:core-ktx:$core_version"
  implementation "androidx.appcompat:appcompat:$appcompat_version"
  implementation "androidx.activity:activity-ktx:$activity_version"
  implementation "androidx.fragment:fragment-ktx:$fragment_version"
  implementation "androidx.browser:browser:$browser_version"

  //Lifecycle
  implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

  //Network
  implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
  implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
  implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
  implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

  //Security
  implementation "androidx.security:security-crypto:$security_version"
  implementation "com.nimbusds:nimbus-jose-jwt:$jose_jwt_version"
  implementation "com.nimbusds:oauth2-oidc-sdk:$oauth2_version"
  implementation 'io.jsonwebtoken:jjwt:0.7.0'

  // Test
  testImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

  //network
  implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
  implementation "com.squareup.okio:okio:2.9.0"
  implementation "com.squareup.retrofit2:converter-moshi:2.9.0"
  //tsl
  implementation 'com.google.android.gms:play-services-auth:19.2.0'

  //rxjava
  implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

  implementation "com.madgag.spongycastle:core:1.58.0.0"
  implementation "com.madgag.spongycastle:bcpkix-jdk15on:1.58.0.0"

  constraints {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
      because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
  }
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "IoReactNativeCiePid"
    codegenJavaPackageName = "it.ioreactnativeciepid"
  }
}
